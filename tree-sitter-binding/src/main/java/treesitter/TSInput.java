package treesitter;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSInput extends Structure {
	/** C type : void* */
	public Pointer payload;
	/** C type : read_callback* */
	public TSInput.read_callback read;
	/**
	 * @see TSInputEncoding<br>
	 * C type : TSInputEncoding
	 */
	public int encoding;
	public interface read_callback extends Callback {
		Pointer apply(Pointer payload, int byte_index, treesitter.TSPoint.ByValue position, IntByReference bytes_read);
	};
	public TSInput() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("payload", "read", "encoding");
	}
	/**
	 * @param payload C type : void*<br>
	 * @param read C type : read_callback*<br>
	 * @param encoding @see TSInputEncoding<br>
	 * C type : TSInputEncoding
	 */
	public TSInput(Pointer payload, TSInput.read_callback read, int encoding) {
		super();
		this.payload = payload;
		this.read = read;
		this.encoding = encoding;
	}
	public static class ByReference extends TSInput implements Structure.ByReference {
		
	};
	public static class ByValue extends TSInput implements Structure.ByValue {
		
	};
}
