package treesitter;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSQueryPredicateStep extends Structure {
	/**
	 * @see TSQueryPredicateStepType<br>
	 * C type : TSQueryPredicateStepType
	 */
	public int type;
	public int value_id;
	public TSQueryPredicateStep() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("type", "value_id");
	}
	/**
	 * @param type @see TSQueryPredicateStepType<br>
	 * C type : TSQueryPredicateStepType
	 */
	public TSQueryPredicateStep(int type, int value_id) {
		super();
		this.type = type;
		this.value_id = value_id;
	}
	public static class ByReference extends TSQueryPredicateStep implements Structure.ByReference {
		
	};
	public static class ByValue extends TSQueryPredicateStep implements Structure.ByValue {
		
	};
}
