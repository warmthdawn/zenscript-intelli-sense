package treesitter;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSInputEdit extends Structure {
	public int start_byte;
	public int old_end_byte;
	public int new_end_byte;
	/** C type : TSPoint */
	public TSPoint start_point;
	/** C type : TSPoint */
	public TSPoint old_end_point;
	/** C type : TSPoint */
	public TSPoint new_end_point;
	public TSInputEdit() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("start_byte", "old_end_byte", "new_end_byte", "start_point", "old_end_point", "new_end_point");
	}
	/**
	 * @param start_point C type : TSPoint<br>
	 * @param old_end_point C type : TSPoint<br>
	 * @param new_end_point C type : TSPoint
	 */
	public TSInputEdit(int start_byte, int old_end_byte, int new_end_byte, TSPoint start_point, TSPoint old_end_point, TSPoint new_end_point) {
		super();
		this.start_byte = start_byte;
		this.old_end_byte = old_end_byte;
		this.new_end_byte = new_end_byte;
		this.start_point = start_point;
		this.old_end_point = old_end_point;
		this.new_end_point = new_end_point;
	}
	public static class ByReference extends TSInputEdit implements Structure.ByReference {
		
	};
	public static class ByValue extends TSInputEdit implements Structure.ByValue {
		
	};
}
