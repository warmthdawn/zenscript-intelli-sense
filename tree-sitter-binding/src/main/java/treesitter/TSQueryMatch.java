package treesitter;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSQueryMatch extends Structure {
	public int id;
	public short pattern_index;
	public short capture_count;
	/** C type : const TSQueryCapture* */
	public treesitter.TSQueryCapture.ByReference captures;
	public TSQueryMatch() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("id", "pattern_index", "capture_count", "captures");
	}
	/** @param captures C type : const TSQueryCapture* */
	public TSQueryMatch(int id, short pattern_index, short capture_count, treesitter.TSQueryCapture.ByReference captures) {
		super();
		this.id = id;
		this.pattern_index = pattern_index;
		this.capture_count = capture_count;
		this.captures = captures;
	}
	public static class ByReference extends TSQueryMatch implements Structure.ByReference {
		
	};
	public static class ByValue extends TSQueryMatch implements Structure.ByValue {
		
	};
}
