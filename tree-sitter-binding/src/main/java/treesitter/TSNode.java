package treesitter;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSNode extends Structure {
	/** C type : uint32_t[4] */
	public int[] context = new int[4];
	/** C type : const void* */
	public Pointer id;
	/** C type : const TSTree* */
	public PointerByReference tree;
	public TSNode() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("context", "id", "tree");
	}
	/**
	 * @param context C type : uint32_t[4]<br>
	 * @param id C type : const void*<br>
	 * @param tree C type : const TSTree*
	 */
	public TSNode(int context[], Pointer id, PointerByReference tree) {
		super();
		if ((context.length != this.context.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.context = context;
		this.id = id;
		this.tree = tree;
	}
	public static class ByReference extends TSNode implements Structure.ByReference {
		
	};
	public static class ByValue extends TSNode implements Structure.ByValue {
		
	};
}
