package treesitter;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TSRange extends Structure {
	/** C type : TSPoint */
	public TSPoint start_point;
	/** C type : TSPoint */
	public TSPoint end_point;
	public int start_byte;
	public int end_byte;
	public TSRange() {
		super();
	}
	protected List<String> getFieldOrder(){
		return Arrays.asList("start_point", "end_point", "start_byte", "end_byte");
	}
	/**
	 * @param start_point C type : TSPoint<br>
	 * @param end_point C type : TSPoint
	 */
	public TSRange(TSPoint start_point, TSPoint end_point, int start_byte, int end_byte) {
		super();
		this.start_point = start_point;
		this.end_point = end_point;
		this.start_byte = start_byte;
		this.end_byte = end_byte;
	}
	public static class ByReference extends TSRange implements Structure.ByReference {
		
	};
	public static class ByValue extends TSRange implements Structure.ByValue {
		
	};
}
